<!-- This file contains javascript helper functions that also can use jinja -->
<script type="text/javascript">




    function internalFormatBtcAmountAsSats(
        value,
        enable_digit_formatting=false,
    ) {
        const locale = 'en-US';
        var s = (parseFloat(value) * 1e8).toLocaleString(locale, { 
            minimumFractionDigits: 0, 
            maximumFractionDigits: 0 
        });         

        let thousandsSeparator = Number(1000).toLocaleString(locale).charAt(1);
        let decimalSeparator = Number(1.1).toLocaleString(locale).charAt(1);
        
        // combine the thousandsSeparator with the left number to an array
        var array = [];
        for (var i in s){
            var letter = s[i];
            if (letter == thousandsSeparator){
                array[array.length-1] += letter;
            } else {
                array.push(letter);
            }
        }

        if (enable_digit_formatting){
            const l = array.length;
            if (l >= 4){
                var left_index = l >= 6 ? l-6 : 0;
                array[left_index] = `<span class="thousand-digits-in-sats-amount">${array[left_index]}`;
                array[l-4] = `${array[l-4]}</span>`;
            }

            var left_index = l >= 3 ? l-3: 0;
            array[left_index] = `<span class="last-digits-in-sats-amount">${array[left_index]}`;
            array[l-1] = `${array[l-1]}</span>`;
        }

        return array.join('')
    }

    function internalFormatBtcAmount(
        value,
        maximum_digits_to_strip=7,
        minimum_digits_to_strip=6,
        enable_digit_formatting=true,
        shrink_stripped=false
    ){
        /*
        Formats the btc amount such that it can be right aligned such
        that the decimal separator will be always at the same x position.
        Stripping trailing 0's is done via just making the 0's transparent.
        Args:
            value (Union[float, str]): Will convert string to float.
                The float is expected to be in the unit (L)BTC with 8 relevant digits
            maximum_digits_to_strip (int, optional): No more than maximum_digits_to_strip
                trailing 0's will be stripped. Defaults to 7.
            minimum_digits_to_strip (int, optional): Only strip any trailing 0's if
                there are at least minimum_digits_to_strip. Defaults to 6.
            enable_digit_formatting (bool, optional): Will group the Satoshis into blocks of 3,
                e.g. 0.03 123 456, and color the blocks. Defaults to True.
        Returns:
            str: The formatted btc amount as html code.
        */
        const locale = 'en-US';
        var formatted_amount = parseFloat(value).toLocaleString(locale, { 
            minimumFractionDigits: 8, 
            maximumFractionDigits: 8 
        }); 

        var array = Array.from(formatted_amount);
        let thousandsSeparator = Number(1000).toLocaleString(locale).charAt(1);
        let decimalSeparator = Number(1.1).toLocaleString(locale).charAt(1);

        var count_digits_that_can_be_stripped = 0;
        for (var j in array){
            var i = array.length - j - 1;
            if (array[i] == "0"){
                count_digits_that_can_be_stripped += 1;
                continue
            }
            break
        }

        if (count_digits_that_can_be_stripped >= minimum_digits_to_strip){
            // loop through the float number, e.g. 0.03 000 000, from the right and replace 0's or the '.' until you hit anything != 0
            for (var j in array){
                var i = array.length - j - 1;
                if ((array[i] == "0") && (array.length - i <= maximum_digits_to_strip)){
                    array[i] = `<span class="unselectable transparent-text ${shrink_stripped ? 'hidden' : ''}">${array[i]}</span>`;
                    // since this digit == 0, then continue the loop and check the next digit
                    continue
                }
                // the following if branch is only relevant if last_digits_to_strip == 8, i.e. all digits can be stripped
                else if (formatted_amount[i] == "."){
                    array[i] = `<span class="unselectable transparent-text ${shrink_stripped ? 'hidden' : ''}">${array[i]}</span>`;
                    // since this character == '.', then the loop must be broken now
                }
                // always break the loop. Only the digit == 0 can prevent this break
                break
            }
        }

        const l = array.length;
        if (enable_digit_formatting){
            array[l-6] = `<span class="thousand-digits-in-btc-amount">${array[l-6]}`;
            array[l-4] = `${array[l-4]}</span>`;
            array[l-3] = `<span class="last-digits-in-btc-amount">${array[l-3]}`;
            array[l-1] = `${array[l-1]}</span>`;
        }

        return array.join('');
    }





    // Formats an unitLabel (e.g. from a tx output) to a useful unit label
    function formatUnitLabel(unitLabel, convertToSat){
        var newLabel = unitLabel;
        if (newLabel == "" || !newLabel){
            newLabel = {% if specter.is_liquid %}"LBTC"{%else%}"BTC"{%endif%} 
        }                    
        if (convertToSat) {
            if(newLabel == "LBTC"){
                newLabel = "Lsat";
            }
            // Liquid JSON response on testnet is already tLBTC 
            else if (newLabel == "tLBTC") {
                newLabel = "tLsat";
            }
            if(newLabel == "BTC"){
                newLabel = "sat";
            } 
        } else {
            if (unitLabel == "btc") {
                newLabel = "BTC"
            }
        }

        {% if specter.is_testnet %}
            if (!newLabel.startsWith("t")){
                newLabel = "t" + newLabel;
            }
        {%endif%}
        
        return newLabel;
    }





    // Formats the valueInBTC (e.g. from a tx output) to an array
    // e.g. ["0.22569496", "tBTC"]
    function formatBtcAmountAndUnitArray(valueInBTC, unitLabel='{{ specter.unit }}', shrink_stripped=true){
        if ('{{ specter.hide_sensitive_info }}' == 'True'){
            return "#########"};
        if (valueInBTC == null){
            return "Unknown"};
        if (valueInBTC <= 1e-8 && '{{ specter.is_liquid }}' == 'True'){
            return "Confidential"}

        const convertToSat = unitLabel == 'sat';
        var formattedUnitLabel = formatUnitLabel(unitLabel, convertToSat);        
        var formattedValue = convertToSat ? internalFormatBtcAmountAsSats(valueInBTC) : internalFormatBtcAmount(
                                                                                            valueInBTC,
                                                                                            maximum_digits_to_strip=7,
                                                                                            minimum_digits_to_strip=6,
                                                                                            enable_digit_formatting=true,
                                                                                            shrink_stripped=shrink_stripped);
        return [formattedValue, formattedUnitLabel];  
    }

    // Formats the valueInBTC (e.g. from a tx output) to an "formattedValue formattedUnitLabel"
    // e.g. "0.22569496 tBTC"
    function formatBtcAmountAndUnit(valueInBTC, unitLabel='{{ specter.unit }}', shrink_stripped=true){
        return formatBtcAmountAndUnitArray(valueInBTC, unitLabel, shrink_stripped).join(' ');  
    }
    // Formats the valueInBTC (e.g. from a tx output) to an "formattedValue formattedUnitLabel"
    // e.g. "0.22569496 tBTC"
    function formatBtcAmount(valueInBTC, unitLabel='{{ specter.unit }}', shrink_stripped=true){
        return formatBtcAmountAndUnitArray(valueInBTC, unitLabel, shrink_stripped)[0];  
    }




    // Determines if an unitLabel (e.g. from a tx output) is "BTC", "LBTC", "tBTC", "tLBTC"
    function unitLabelIsBitcoin(unitLabel){
        if (!unitLabel){
            return true            
        } 
        return ([null, "", "LBTC", "BTC", "tBTC", "tLBTC"].indexOf(unitLabel) > -1)
    }

    // Calculates and formats the price as a span class="note"
    function formatPrice(valueInBTC, unitLabel, symbol, price){
        var formattedPrice = "";
        if (valueInBTC) {
            if(unitLabelIsBitcoin(unitLabel)){
                if (price && symbol) {
                    formattedPrice = `<span class="note">(${symbol}${numberWithCommas((parseFloat(price) * valueInBTC).toFixed(2))})</span>`;
                }
            }
        }
        return formattedPrice
    }




</script>
