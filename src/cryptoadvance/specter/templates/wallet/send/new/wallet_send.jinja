{% extends "wallet/components/wallet_tab.jinja" %}
{% set tab = 'wallet_send' %}
{% block content %}

	{% include "includes/qr-scanner.html" %}

	{% from 'wallet/send/components/send_nav.jinja' import send_nav %}
	{{ send_nav('wallet_sendnew', wallet_alias) }}

	<message-box type="error" id="amount_errors_container" style="position: absolute; top: 0; display: none;">
		Error!
		</ul>
	</message-box>

	<form action="{{ url_for('wallet_sendnew',wallet_alias=wallet_alias) }}" method="POST">
		<h1 class="padded">Sending to:</h1>
		<div class="card">
			Recipient address:<br>
			<div class="row">
				<input type="text" id="address" name="address" id="address" oninput="validateForm()"> &nbsp;
				<qr-scanner id="address-scan">
					<a slot="button" class="btn" style="height: 35px;"><img src="/static/img/qr_tiny.svg"/> Scan</a>
				</qr-scanner>
			</div>
			<br>
			Address label (optional):<br>
			<input type="text" id="label" name="label" value="{{ label }}">
			<br><br>
			Amount:<br>
			<input style="width: 200px" type="number" name="amount" oninput="calculateConvertedUnit()" id="amount" min=0 step="1e-8" autocomplete="off">
			<input type="hidden" name="btc_amount" id="btc_amount">
			<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit" value="sat" onchange="toggleUnit(this)" checked>sat</label>
			<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit" value="btc" onchange="toggleUnit(this)">BTC</label>
			<div>
				<span class="note" id="converted_unit_amount">-</span> <span class="note" id="converted_unit_label">BTC</span>, 
				<span class="note">Available: {{wallet.full_available_balance | btcamount}};</span>
				{% if wallet.locked_amount > 0 %}
					<span class="note" >&nbsp;Waiting in usigned transactions: {{wallet.locked_amount | btcamount}}</span>
					<div class="tool-tip" style="text-align: center;">
						<i class="tool-tip__icon">i</i>
						<p class="tool-tip__info">
							<span class="info">
								<span class="info__title">Funds waiting in usigned transactions<br><br></span>
								To make funds available to spend in new transactions, just click on the "Unsigned" tab and delete unsigned transaction you have no need for.
							</span>
						</p>
					</div>
				{% endif %}
			</div><br>
			{% include "wallet/send/new/components/fee_selection.jinja" %}
			{% include "wallet/send/new/components/coin_selection.jinja" %}
			<button type="submit" disabled name="action" value="createpsbt" id="create_psbt_btn" class="btn centered" style="margin-top: 20px;">Create unsigned transaction</button>
		</div>
	</form>
{% endblock %}


{% block scripts %}
	<script>
		// Amount and unit
		var unit = 'sat';
		var amount = 0.0;

		document.getElementById('address-scan').addEventListener('scan', e=>{
			let addr = e.detail.result;
			if(addr == null){
				return;
			}
			// remove bitcoin: stuff
            if(addr.indexOf("bitcoin:") >= 0){
                addr = addr.substr(addr.indexOf("bitcoin:")+8);
            }
            let arr = addr.split("?");
            addr = arr[0]
            document.getElementById("address").value = addr;
            let evt = new Event('input');
            document.getElementById("address").dispatchEvent(evt);
            // parse metadata like amount and message
            if(arr.length > 1){
                arr = arr[1].split("&");
                arr.forEach((e)=>{
                    if(e.startsWith("amount=")){
                    	let val = parseFloat(e.substr(7));
                    	if(unit == 'sat'){
                    		val = Math.round(val*1e8);
                    	}
                        document.getElementById("amount").value = val;
                        let evt = new Event('input');
                        document.getElementById("amount").dispatchEvent(evt);
                    }
                    if(e.startsWith("message=")){
                    	document.getElementById("label").value = e.substr(8);
                    }
                });
            }
		});

		function toggleUnit(unitSelected) {
			unit = unitSelected.value;
			document.getElementById('converted_unit_label').innerHTML = (unit == 'sat' ? 'BTC' : 'sat');
			calculateConvertedUnit();
		}

		function calculateConvertedUnit() {
			let amountInput = document.getElementById('amount');
			amount = parseFloat(amountInput.value);
			let convertedAmount = Number.parseFloat(amount / (unit == 'sat' ? 100000000 : 0.000000001)).toFixed((unit == 'sat' ? 8 : 0));
			if (convertedAmount == 'NaN') {
				convertedAmount = '-'
			}
			document.getElementById('converted_unit_amount').innerHTML = convertedAmount;

			document.getElementById('btc_amount').value = (unit == 'btc' ? amount : amount / 100000000);

			validateForm();
		}

		function isAboveWalletBalance(unit) {
			return (unit == 'sat' ? amount / 100000000 : amount) > parseFloat('{{ wallet.full_available_balance }}');
		}

		function isInvalidValue(unit){
			if (!amount) {
			    return false;
			}
			return (unit == 'sat' ? amount / 100000000 : amount) < 1e-8;
		}

		// Form validation
		function validateAmount() {
			let amountInput = document.getElementById('amount');
			amountInput.max = getSpendableAmount(unit);

			if (isAboveWalletBalance(unit)) {
				setVisibility('amount_errors_container', 'block');
				document.getElementById('amount_errors_container')
					.innerHTML = "You cannot send more than {{ wallet.full_available_balance | btcamount }} BTC!";
				return false;
			} else if (shouldSelectMoreCoins(unit)) {
				setVisibility('amount_errors_container', 'block');
				document.getElementById('amount_errors_container')
					.innerHTML = "You need to select more coins to match your amount!";
				return false;
			} else if (isInvalidValue(unit)) {
				setVisibility('amount_errors_container', 'block');
				document.getElementById('amount_errors_container')
					.innerHTML = "Invalid amount! Wrong unit?";
				return false;
			} else {
				setVisibility('amount_errors_container', 'none');
				return true;
			}
		}

		function validateAddress() {
			let addressInput = document.getElementById('address');
			if (addressInput.value) {
				return true;
			}
			// TODO: add proper address format validation.
			return false;
		}

		function validateForm() {
			let createPSBTButton = document.getElementById('create_psbt_btn');
			createPSBTButton.disabled = !(validateAmount() && validateAddress());
		}

		// Utils
		function setVisibility(id, visibility) {
			document.getElementById(id).style.display = visibility;
		}
	</script>
{% endblock %}
