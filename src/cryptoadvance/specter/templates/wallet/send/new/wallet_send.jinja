{% extends "wallet/components/wallet_tab.jinja" %}
{% set tab = 'send' %}
{% block content %}

	<style>
		.max-btn:hover {
			text-decoration: underline;
			cursor: pointer;
		}
		#calculated_tx_fee_label:hover {
			text-decoration: underline;
			cursor: pointer;
		}
	</style>

	{% include "includes/qr-scanner.html" %}

	{% from 'wallet/send/components/send_nav.jinja' import send_nav %}
	{{ send_nav('send_new', wallet_alias) }}

	<message-box type="error" id="amount_errors_container" style="position: absolute; top: 0; display: none;">
		Error!
		</ul>
	</message-box>

	<form action="{{ url_for('wallets_endpoint.send_new',wallet_alias=wallet_alias) }}" id="send-form" method="POST" style="width: 100%;">
		<input type="hidden" class="csrf-token" name="csrf_token" value="{{ csrf_token() }}"/>
		<input type="hidden" name="rbf_tx_id" value="{{ rbf_tx_id }}"/>
		<input type="hidden" name="recipient_ids_in_order"  id="recipient_ids_in_order" value=""/>  
		<input type="hidden" name="subtract_from"  id="subtract_from" value=""/>  
		<h1 class="padded">{{ _("Create Transaction") }}</h1>
		<div style="display: flex; justify-content: center; margin-bottom: 15px">
			<div>{{ _("Available funds:") }} {{wallet.amount_available | btcunitamount}}
				{% if specter.unit == 'sat' %}
					sats
				{% else %}
					{% if specter.is_testnet %}t{%endif%}{% if specter.is_liquid %}L{%endif%}BTC
				{% endif %}<br>
				{% if specter.price_check %}
					<span class="note">{{ wallet.amount_available | altunit }}</span>
				{% endif %}
				{% if specter.is_liquid and wallet.balance.get("assets", {}) %}
				<span>
					<br>{{ _("Assets:") }}<br>
					{% for asset in wallet.balance.get("assets",{}).keys() | sort %}
						{% set balance = wallet.balance.get("assets",{}).get(asset, {}) %}
						<span style="margin: 0 10px;">
							{{ (balance.get("trusted", 0) + balance.get("untrusted_pending", 0) + balance.get("immature", 0)) | btcamount }}
							<asset-label data-asset="{{asset}}" data-label="{{asset | assetlabel}}"></asset-label>
						</span>
					{% endfor %}
				</span>
				{% endif %}
			</div>
			{% if wallet.amount_locked_unsigned  > 0 or wallet.amount_frozen > 0 %}
			<div>
				<tool-tip>
				    <h4 slot="title">{{ _("Why is this less than my total balance?") }}</h4>
				    <span slot="paragraph">
						{{ _(' Frozen outputs and outputs locked in unsigned transactions are not available here.  
						To make more funds available, click on the "Unsigned" tab and delete not required transactions or unfreeze UTXO under "Transactions".') }}
				    </span>
				</tool-tip>
	        </div>
	        {% endif %}
	    </div>
		<div class="card" style="margin: auto;">
			<div id="recipients" {% if ui_option != 'ui' %}class="hidden"{% else %} class="recipient_wrapper" {% endif %}></div>
			<div id="add-recipient" title="Add a recipient" class="recipient_button" style="float:right"  onclick="addRecipient('', 0, 'btc', '')"><svg width="20" height="20" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg></div>
			<div id="recipients-txt-container" {% if ui_option == 'ui' %}class="hidden"{% endif %}>
			{{ _("Unit:") }} 
			<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_text" value="sat" onchange="toggleUnit(this, 'text')" {% if specter.unit == 'sat' %}checked{% endif %}>sat</label>
			<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_text" value="btc" onchange="toggleUnit(this, 'text')" {% if specter.unit != 'sat' %}checked{% endif %}>BTC</label><br>

			<textarea id="recipients-txt" name="recipients" placeholder="{{ _('Enter recipient address, amount') }}" style="margin-top: 5px; font-size: 0.95em;" onblur="validateForm()">{{ recipients_txt }}</textarea>
				<p class="note" style="line-height: 2; background-color: #16202d; padding: 10px; border-radius: 7px;">
					{{ _("Enter each recipient address, amount as a new line:") }}<br>
					&lt;{{ _("ADDRESS") }}1&gt;, &lt;{{ _("AMOUNT") }}1&gt;<br>
					&lt;{{ _("ADDRESS") }}2&gt;, &lt;{{ _("AMOUNT") }}2&gt;<br>
					&lt;{{ _("ADDRESS") }}3&gt;, &lt;{{ _("AMOUNT") }}3&gt;<br>
				</p>
			</div>
			<p><span id="calculated_tx_fee_label" class="note" style="margin-top: 17px;" onclick="calculateEstimatedFee()">{{ _("Calculate estimated fee") }}</span><span class="note" id="calculated_tx_fee"></span><p>
			<span id="toggle_advanced" style="cursor: pointer;">{{ _("Advanced") }} {% if show_advanced_settings %}&#9660;{% else %}&#9654;{% endif %}</span>
			<br>
			<div id="advanced_settings" style="margin: auto; max-width: 90%; display: {% if show_advanced_settings %}block{% else %}none{% endif %};">
				<div>{{ _("Transaction editor:") }} 
					<label><input type="radio" class="inline" style="margin: 0 10px 0 20px;" name="ui_option" value="ui" onclick="toggleSendUIType(this)" {% if ui_option == 'ui' %}checked{% endif %} id="ui-radio-btn">UI</label>
					<label><input type="radio" class="inline" style="margin: 0 10px 0 20px;" name="ui_option" value="text" onclick="toggleSendUIType(this);" {% if ui_option != 'ui' %}checked{% endif %}>text</label>
				</div><br>
				{% include "includes/fee-selection.html" %}
				<fee-selection id="fee-selection-component"></fee-selection>
				<br>
				<br>
				<br>
				<div class="row break-row-mobile" id="vertical-space-for-subtract-fees-from-amount-checkbox" style="margin-top: 0px;"></div>
			</div>
			{% include "includes/tx-row.html" %}
			{% include "includes/tx-data.html" %}
			{% include "includes/explorer-link.html" %}
			{% include "includes/tx-table.html" %}
			{% include "includes/coin_selection.html" %}
			<coin-selection  
				id="coinselection-webcomponent"
				wallet-alias="{{wallet.alias}}"
				spendable-amount='{{ wallet.full_available_balance | btcamount }}'
				is-liquid="{{specter.is_liquid}}"
				selected-coins="{{ selected_coins }}">
			</coin-selection>
			<button onclick="validateForm(true)" type="button" name="action" value="createpsbt" id="create_psbt_btn" class="btn centered" style="margin-top: 20px;">{{ _('Create <span class="optional">&nbsp;unsigned&nbsp;</span>transaction') }}</button>
		</div>
	</form>
{% endblock %}


{% block scripts %}
    <script src="{{ url_for('static', filename='Sortable.min.js') }}"></script>   <!-- v1.15.0 from https://github.com/SortableJS/Sortable/releases -->
	<script>
		{% if specter.is_liquid %}
			const MIN_FEE_RATE = 0.1;
			const NETWORK = "Liquid"
		{% else %}
			const MIN_FEE_RATE = 1;
			const NETWORK = "Bitcoin"
		{% endif %}



		function get_recipient_ids() {
			return recipient_array.map(({id}) => id);
		}

		function get_recipient(recipient_id) {
			let ids = get_recipient_ids();
			return  recipient_array[ids.indexOf(recipient_id)];
		}

		// Amounts and units
		var textUnit = '{{ specter.unit }}';
		var recipient_array = [];
		// TODO: use total balance including unconfirmed
		var assetBalances = {
			"btc": {
				"balance": {{ wallet.full_available_balance }},
				"label": "{% if specter.is_testnet %}t{%endif%}{% if specter.is_liquid %}L{%endif%}BTC",
			},
			"sat": {
				"balance": Math.round({{ wallet.full_available_balance*1e8 }}),
				"label": "sat",
			},
		{% for asset in wallet.balance.get("assets",{}).keys() | sort %}
			"{{asset}}": {
				"balance": {{wallet.balance.get("assets",{}).get(asset, {}).get("trusted", 0)}},
				"label": "{{ asset | assetlabel }}",
			},
		{% endfor %}
		};
		var spendableAmount = {{ wallet.full_available_balance }}

		// Set up web components
		var coinselectionWebcomponent = document.getElementById('coinselection-webcomponent');
		coinselectionWebcomponent.assetBalances = assetBalances
		coinselectionWebcomponent.addEventListener("change", (event) => {
			validateForm()
		})
		var FeeSelectionComponent = document.getElementById('fee-selection-component')
		FeeSelectionComponent = document.getElementById('fee-selection-component')

		// Switch off RBF and subtract fee for Liquid
		function adjustForLiquid() {
			if (NETWORK == "Liquid") {
			console.log("On Liquid, removing RBF and subtract from features ... ")
			FeeSelectionComponent.deactivateRbf()
			FeeSelectionComponent.deactivateSubtract() // Subtract from is still set to true for send max under the hood
			// Remove some line breaks
			advancedSettingsDiv = document.getElementById("advanced_settings")
			lineBreaks = Array.from(advancedSettingsDiv.querySelectorAll('br'))
			lineBreaks.pop() // We still need the last line break
			for (var br of lineBreaks) {
				if (br.parentNode == advancedSettingsDiv) {
					advancedSettingsDiv.removeChild(br)
				}
			}
			}	
		}
		
		// Main part of displaying subtractFrom, the rest is with addRecipient, deleteRecipient and toggleSendUIType
		FeeSelectionComponent.addEventListener("subtractClick", (event) => {
			if ((recipient_array.length > 1 || !document.getElementById('ui-radio-btn').checked) && document.getElementById('subtract').checked) {
				FeeSelectionComponent.showSubtractFrom(true)
				if (!document.getElementById('ui-radio-btn').checked) {
					FeeSelectionComponent.addLineBreaks(2)
				}
			} 
			else {
				FeeSelectionComponent.showSubtractFrom(false)
				if (!document.getElementById('ui-radio-btn').checked) {
					FeeSelectionComponent.removeLineBreaks()
				}
			}
		})


		function addRecipient(addr, amount, amount_unit, label) {
			let ids = get_recipient_ids();
			id = 0;
			if (ids.length > 0){
				id = Math.max(...ids)+1
			}			;
			recipient = {
				'amount':amount,
				'unit':amount_unit,
				'label':label,
				'id':id,
			};
			

			recipient_array.push(recipient);
			let valueOrPlaceholder = amount == 0 ? 'placeholder="0"' : `value=${amount}`
			if (amount_unit == 'sat') {
				amount = parseFloat(Number.parseFloat(amount * 1e8).toFixed(0));
				if (amount == 'NaN') {
					amount = '-'
				}
			}
			let step = 1;
			if (amount_unit == 'btc') {
				step = 1e-8;
			}
			let satChecked = amount_unit == 'btc' ? '' : 'checked';
			let btcChecked = amount_unit == 'btc' ? 'checked' : '';
			let convertedUnit = amount_unit == 'btc' ? 'sat' : 'BTC';
			{% if specter.is_liquid and wallet.balance.get("assets", {}) %}
				let assetSelector = `
				<select name="amount_unit_${id}" style="width: 100px;" onchange="toggleUnit(this, ${id})">
					<option value="btc">LBTC</option>
					<option value="sat">L-sat (10⁻⁸ LBTC)</option>
				{% for asset in wallet.balance.get("assets",{}).keys() | sort %}
					<option value="{{asset}}">{{asset | assetlabel}}</option>
				{% endfor %}
				</select>
				`;
			{% else %}
				let assetSelector = `
				<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_${id}" value="sat" onchange="toggleUnit(this, ${id})" ${satChecked}>sat</label>
				<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_${id}" value="btc" onchange="toggleUnit(this, ${id})" ${btcChecked}>BTC</label>
				`;
			{% endif %}
			let recipientForm = `			
			<div id="recipient_${id}" class="item" >		
				<span class="recipient_dragger">
					<span  class="recipient_button"  title="Change the order of the recipients" >&#19977;</span>   Recipient ${id+1}
				</span>
				<span class="recipient_button recipient_remove" title="Remove recipient ${id+1}" style="float:right" onclick="removeRecipient(${id})">&#10060;</span>

				<div class="inner_box"  >
					<div class="row">
						<input type="text" id="address_${id}" name="address_${id}" oninput="validateForm()" value="${addr}" placeholder='{{ _("Recipient address") }}'> &nbsp;
						<qr-scanner id="address-scan-${id}" style="margin-top: 3px;">
							<a slot="button" class="btn" style="height: 35px;">
							<img src="{{ url_for('static', filename='img/qr-code.svg') }}" style="width: 26px; margin: 0px;" class="svg-white"> {{ _("Scan") }}</a>
						</qr-scanner>
					</div>				
					<input type="text" style="margin-top: 3px;" id="label_${id}" name="label_${id}" value="${label}"  placeholder='{{ _("Address label") }}''>
					<br>
					{{ _("Amount:") }}<br>
					<input style="width: 200px" type="number" name="amount_${id}" oninput="calculateConvertedUnit(${id})" id="amount_${id}" min=0 step="${step}" autocomplete="off" ${valueOrPlaceholder}>
					<input type="hidden" name="btc_amount_${id}" id="btc_amount_${id}">
					<div class="mobile-only" style="margin-top: 10px;"></div>
					${assetSelector}
					<span class="note max-btn" style="margin-left: 5px;" id="send_max_${id}" onclick="setMaxAmount(${id})">({{ _("send max") }})</span>
					<div>
						<span class="note" id="converted_unit_amount_${id}">-</span> <span class="note" id="converted_unit_label_${id}">${convertedUnit}</span> <span class="note" id="converted_unit_alt_${id}"></span>
					</div>
				</div>
			<div>
			`

			// This adds the recipient
			let recipients = document.getElementById('recipients');
			let newRecipient = document.createElement('div');
			newRecipient.innerHTML = recipientForm;
			newRecipient.id = id;
			recipients.appendChild(newRecipient);
			document.getElementById('address-scan-' + id).addEventListener('scan', e=>{
				let addr = e.detail.result;
				if(addr == null){
					return;
				}
				// remove bitcoin: stuff
				if(addr.indexOf("bitcoin:") >= 0){
					addr = addr.substr(addr.indexOf("bitcoin:")+8);
				}
				let arr = addr.split("?");
				addr = arr[0];
				document.getElementById("address_" + id).value = addr;
				let evt = new Event('input');
				document.getElementById("address_" + id).dispatchEvent(evt);
				// parse metadata like amount and message
				if(arr.length > 1){
					arr = arr[1].split("&");
					arr.forEach((e)=>{
						if(e.startsWith("amount=")){
							let val = parseFloat(e.substr(7));
							if(recipient['unit'] == 'sat'){
								val = Math.round(val*1e8);
							}
							document.getElementById("amount_" + id).value = val;
							let evt = new Event('input');
							document.getElementById("amount_" + id).dispatchEvent(evt);
						}
						if(e.startsWith("message=") || e.startsWith("label=")){
							document.getElementById("label_" + id).value = e.split("=")[1];
						}
					});
				}
			});

			// This adds the id's to the subtract_from_recipient_id_select
			var fee_selection_component = document.getElementById('fee-selection-component');
			var subtract_from_recipient_id_select = fee_selection_component.subtractFrom.children.subtract_from_recipient_id_select;
			var opt = document.createElement('option');
			opt.value = id;
			opt.innerHTML = `Recipient ${id + 1}`;
			subtract_from_recipient_id_select.appendChild(opt);			
			


			// control visibility  and vertical spaces
			if (recipient_array.length == 1) {
				FeeSelectionComponent.showSubtractFrom(false);
				document.getElementById('vertical-space-for-subtract-fees-from-amount-checkbox').style['margin-top'] = '0px';
			} else {
				document.getElementById('vertical-space-for-subtract-fees-from-amount-checkbox').style['margin-top'] = '60px';
				if (document.getElementById('subtract').checked) {
					FeeSelectionComponent.showSubtractFrom(true)
				}
			}

			calculateConvertedUnit(id);
		} 

		function removeRecipient(id=-1) {	
			if (recipient_array.length == 1){  // should not delete the last recipient
				showError(`{{ _("Cannot delete the last recipient") }}`, 5000)
				return;
			}

			if (id==-1) {
				id = recipient_array.length - 1
			};
			let ids = get_recipient_ids();


			// This removes the recipient id from  recipient_array
			recipient_array.splice(ids.indexOf( id), 1);

			// This removes the recipient div 
			for  (var i = sortable_recipient_wrapper.el.children.length -1; i >= 0; i--)   {
				let	child =  sortable_recipient_wrapper.el.children[i];
				if (child['id'] == id) {
					sortable_recipient_wrapper.el.removeChild(child)
				}
			}

			// This removed the id from the subtract_from_recipient_id_select
			var fee_selection_component = document.getElementById('fee-selection-component');
			var subtract_from_recipient_id_select = fee_selection_component.subtractFrom.children.subtract_from_recipient_id_select;
			for  (var i = subtract_from_recipient_id_select.children.length -1; i >= 0; i--)   {
				let	child =  subtract_from_recipient_id_select.children[i];
				if (child.value == id) {
					subtract_from_recipient_id_select.removeChild(child)
				}
			}			


			// control visibility  and vertical spaces
			if (recipient_array.length == 1) {
				FeeSelectionComponent.showSubtractFrom(false);
				document.getElementById('vertical-space-for-subtract-fees-from-amount-checkbox').style['margin-top'] = '0px';
			} else {
				document.getElementById('vertical-space-for-subtract-fees-from-amount-checkbox').style['margin-top'] = '60px';
			}
		}

		function toggleUnit(unitSelected, id) {
			let recipient = recipient(id);

			if (id == 'text') {
				textUnit = unitSelected.value
			} else {
				recipient['unit'] = unitSelected.value;
				let unitLabelEl = document.getElementById('converted_unit_label_' + id);
				if(recipient['unit'] == 'sat'){
					unitLabelEl.innerHTML = 'BTC';
				}else if(recipient['unit'] == 'btc'){
					unitLabelEl.innerHTML = 'sat';
				}else{
					unitLabelEl.innerHTML = '';
				}
				document.getElementById('amount_' + id).setAttribute('step', recipient['unit'] == 'sat' ? '1' : '1e-8');
				calculateConvertedUnit(id);
			}
		}

		function calculateConvertedUnit(id) {
			let amountInput = document.getElementById('amount_' + id);

			let recipient = get_recipient(id);
			recipient['amount'] = parseFloat(amountInput.value);

			let convertedAmount = parseFloat(Number.parseFloat(recipient['amount'] / (recipient['unit'] == 'sat' ? 1e8 : 1e-8)).toFixed((recipient['unit'] == 'sat' ? 8 : 0)));
			if (convertedAmount == 'NaN') {
				convertedAmount = '-'
			}
			document.getElementById('btc_amount_' + id).value = (recipient['unit'] == 'sat' ? recipient['amount'] / 1e8 : recipient['amount']);

			if(recipient['unit'] == 'sat' || recipient['unit'] == 'btc'){
				document.getElementById('converted_unit_amount_' + id).innerHTML = (isNaN(convertedAmount) ? '-' : convertedAmount.toFixed(8).replace(/(\.0+|0+)$/, ''));
			{% if specter.price_check %}
				let altRate = parseFloat('{{ specter.alt_rate }}');
				let altSymbol = '{{ specter.alt_symbol }}';
				let altAmount = parseFloat((altRate * parseFloat(document.getElementById('btc_amount_' + id).value)).toFixed(2))
				if (!isNaN(altAmount) && (altSymbol && altRate)) {
					document.getElementById('converted_unit_alt_' + id).innerHTML = '&nbsp;(' + altAmount + altSymbol + ')';
				} else {
					document.getElementById('converted_unit_alt_' + id).innerHTML = '';
				}
			{% endif %}
			}else{
				document.getElementById('converted_unit_amount_' + id).innerHTML = '&nbsp;';
				document.getElementById('converted_unit_alt_' + id).innerHTML = '&nbsp;';
			}
			
			validateForm();
		}

		function isAboveWalletBalance(unit, amount) {
			// TODO: Currently check is disabled for RBF for simplicity, should add it back for RBF
			if ("{{rbf_tx_id}}") {
				return false;
			}
			if(unit in assetBalances){
				return amount > assetBalances[unit].balance;
			}else{
				return amount > 0;
			}
		}

		function isInvalidValue(unit, amount){
			if (!amount) {
				return false;
			}
			return (unit == 'sat' ? amount / 1e8 : amount) < 1e-8;
		}

		async function setMaxAmount(i) {
			FeeSelectionComponent.showSubtractFrom(true)
			FeeSelectionComponent.setSubtractFrom(id)
			let amountInput = document.getElementById('amount_' + id);
			if (!validAddress(id)) {
				return;
			}
			FeeSelectionComponent.setSubtract(recipient['unit'] == 'sat' || recipient['unit'] == 'btc' || recipient['unit'] == 'lbtc');
			let othersAmount = 0;
			for(let j in recipient_array) {		
				other_recipient = recipient_array[j]		;
				if (other_recipient['id'] != id) {
					let unit = other_recipient['unit'];
					let amount = other_recipient['amount'];
					// assets
					if(other_recipient['unit'] != 'sat' || other_recipient['unit'] != 'btc'){
						if(unit == recipient['unit']){
							othersAmount += amount;
						}
					// btc
					}else{
						if(unit == 'sat' || unit == 'btc'){
							othersAmount += (unit == 'sat' ? amount / 1e8 : amount);
						}
					}
				}
			}

			let maxAmount = (coinselectionWebcomponent.getSpendableAmount(recipient['unit']) - (recipient['unit'] == 'sat' ? othersAmount * 1e8 : othersAmount));
			if (recipient['unit'] == 'sat') {
				maxAmount = Math.round(maxAmount);
			} else {
				maxAmount = parseFloat(maxAmount.toFixed(8));
			}
			if (maxAmount < 0) {
				maxAmount = 0;
			}
			amountInput.value = maxAmount;
			
			calculateConvertedUnit(id);
		}

		// Form validation
		function validateAmount(unit, amount, id, allowZero=false) {
			if (isNaN(amount)) {
				showError(`{{ _("Amount entered is invalid!") }}`, 5000);
				return false;
			}
			if (id) {
				let amountInput = document.getElementById('amount_' + id);
				if (coinselectionWebcomponent != null) {
					amountInput.max = coinselectionWebcomponent.getSpendableAmount(unit);
				} else {
					amountInput.max = spendableAmount
				}
			}
			if (!amount && !allowZero) {
				showError(`{{ _("Amount is zero.") }}`, 5000);
				return false;
			}
			if (isAboveWalletBalance(unit, amount)) {
				showError(`{{ _("You cannot send more than") }} ${assetBalances[unit].balance} ${assetBalances[unit].label}!`, 5000);
				return false;
			} 
			// Directly checks coin selection in here
			else if (coinselectionWebcomponent.shouldSelectMoreCoins(unit, amount)) {
				showError(`{{ _("You need to select more coins!") }}`, 5000);
				return false;
			} 
			else if (isInvalidValue(unit, amount)) {
				showError(`{{ _("Invalid amount! Wrong unit?") }}`, 5000);
				return false;
			} 
			else {
				return true;
			}
		}

		// Returns true if the address is valid 
		function validAddress(id) {
			let reWhite = /\s/;
			let addressInput = document.getElementById('address_' + id);
			if (!addressInput.value) {
				showError(`{{ _("You provided no address.") }}`, 5000);
				return false
			}
			// Segwit addresses are always between 14 and 74 characters long.
			else if (addressInput.value.length < 14) {
				showError(`{{ _("Please provide a valid address!") }}`, 5000);
				return false
			}
			else if (reWhite.test(addressInput.value)) {
				showError(`{{ _("Looks like there are whitespaces in the address field.") }}`, 5000);
				return false
			}
			else {
				return true;
			}
		}

		// Returns true if the fee is valid
		function validFee() {
			let feeRate = FeeSelectionComponent.selectedFee()
			if (feeRate == '') {
				showError(`{{ _("You didn't input a number for the fee or left it empty.") }}`, 5000)
				return false	
			}
			else if (feeRate < MIN_FEE_RATE) {
				showError(`{{ _("Your fee is too low. The minimum fee for ${NETWORK} is ${MIN_FEE_RATE} satoshi.") }}`, 5000)
				return false	
			}
			else {
				return true
			}
		}


		async function checkIfOwnAddress(recipient_id) {
			let address = document.getElementById('address_' + recipient_id).value;
			if (!address){return;}

			let url="{{ url_for('wallets_endpoint_api.is_address_mine', wallet_alias=wallet.alias, address='this_address') }}"
			url = url.replace('this_address', address)			
					
			let is_address_mine = send_request(url, 'GET');
			return is_address_mine;
		}

		function mark_recipient(recipient_id, is_address_mine){
			console.log(`Marking ${recipient_id} as is_mine=${is_address_mine}`)

			let html_address = document.getElementById(`address_${recipient_id}`);
			if (is_address_mine) {
				html_address.style.backgroundColor= 'var(--cmap-bg-address-is-min)';
			} else {
				html_address.style.backgroundColor= "rgba(1, 1, 1, 0)";
			}

		}

		function validateForm(submitted=false) {
			console.log("validateForm is called")
			let createPSBTButton = document.getElementById('create_psbt_btn');
			// Disables submit but button still clickable before every validation
			createPSBTButton.setAttribute('type', 'button');
			let totalAmount = 0.0;
			let assetAmounts = {};
			if (document.getElementById('ui-radio-btn').checked) {
				for(let i in recipient_array) {
					let recipient = recipient_array[i];
					if(recipient['unit'] == 'btc' || recipient['unit'] == 'sat'){
						totalAmount += (recipient['unit'] == 'sat' ? recipient['amount'] / 1e8 : recipient['amount']);
					}else{
						if(recipient['unit'] in assetAmounts){
							assetAmounts[recipient['unit']] += recipient['amount'];
						}else{
							assetAmounts[recipient['unit']] = recipient['amount'];
						}
					}
					if (document.getElementById("amount_" + recipient['id']).value == '') {
						recipient['amount'] = 0;
					}

					checkIfOwnAddress(recipient['id']).then((is_mine) => {
						mark_recipient(recipient['id'], is_mine );
					});
					

					if (submitted) {
						// Check address
						if (!validAddress(recipient['id'])) {
							return;
						}
						// Check amount
						if (!validateAmount(recipient['unit'], recipient['amount'], recipient['id'])) {
							return;
						}
					}
				}
				// Check fee selection
				if (submitted) {
					if (!validFee()) {
					return
					}	
				}
	
			} else {
				let outputs = document.getElementById('recipients-txt').value.split('\n');
				for (let output of outputs) {
					if (textUnit == 'sat') {
						totalAmount += parseInt(output.split(',')[1].trim()) / 1e8;
					} else {
						totalAmount += parseFloat(output.split(',')[1].trim());
					}
				}
			}

			// Check Liquid assets
			for(asset in assetAmounts){
				if(!validateAmount(asset, assetAmounts[asset])){
					return;
				}
			}

			// this has to be set before send-form POST request 
			var recipient_ids_in_order = document.getElementById('recipient_ids_in_order')  
			recipient_ids_in_order.value = JSON.stringify(sortable_recipient_wrapper.toArray()); 

			// subtract_from = number of input (starting from 0), while subtract_from_recipient_id_select is the recipient_id
			var fee_selection_component = document.getElementById('fee-selection-component');
			var subtract_from_recipient_id_select = fee_selection_component.subtractFrom.children.subtract_from_recipient_id_select;
			let ids = get_recipient_ids();
			console.log(ids)
			console.log(subtract_from_recipient_id_select.value)
			console.log(ids.indexOf(subtract_from_recipient_id_select.value))
			document.getElementById('subtract_from').value =  sortable_recipient_wrapper.toArray().indexOf(subtract_from_recipient_id_select.value); 

			createPSBTButton.setAttribute('type', 'submit');
			return true;
		}

		// Utils
		function setVisibility(id, visibility) {
			document.getElementById(id).style.display = visibility;
		}

		function toggleAdvanced() {
			let advancedButton = document.getElementById('toggle_advanced');
			let advancedSettings = document.getElementById('advanced_settings');
			if (advancedSettings.style.display === 'block') {
				advancedSettings.style.display = 'none';
				advancedButton.innerHTML = `{{ _("Advanced") }} &#9654;`;
			} else {
				advancedSettings.style.display = 'block';
				advancedButton.innerHTML = `{{ _("Advanced") }} &#9660;`;
			}
		}

		function toggleSendUIType(radioBtn) {
			if (radioBtn.value == 'ui') {
				FeeSelectionComponent.removeLineBreaks()
				setVisibility('recipients', 'block');
				setVisibility('add-recipient', 'flex');
				setVisibility('recipients-txt-container', 'none');
				setVisibility('subtract', 'block');
				if (recipient_array.length > 1) {
				}
				else {
					FeeSelectionComponent.showSubtractFrom(false)
				}
			} else {
				setVisibility('recipients', 'none');
				setVisibility('add-recipient', 'none');
				setVisibility('recipients-txt-container', 'block');
				// Assumes that text is always used for multiple recipients
				if (document.getElementById('subtract').checked) {
					FeeSelectionComponent.showSubtractFrom(true)
					// Adds two line breaks after the RBF checkbox, since it gets crowded
					FeeSelectionComponent.addLineBreaks(2)
				}
			}
		}

		async function calculateEstimatedFee() {
			document.getElementById('calculated_tx_fee').innerText = ``;
			if (await validateForm(true) !== true) {
				return;
			}
			try {				
				var formData = new FormData(document.getElementById('send-form'));
				let url="{{ url_for('wallets_endpoint_api.estimate_fee', wallet_alias=wallet.alias) }}"
				formData.append("estimate_fee", true)
			
				let result = await send_request(url, 'POST', formData);
				console.log(result);
				if (result.success) {
					let psbt = result.psbt;
					let fees = parseInt(psbt.fee * 1e8)
					document.getElementById('calculated_tx_fee').innerText = `: ${fees} sats`;
					if('{{ specter.price_check }}' == 'True'){
						let altRate = parseFloat('{{ specter.alt_rate }}');
						let altSymbol = '{{ specter.alt_symbol }}';
						let altAmount = parseFloat((altRate * fees / 1e8).toFixed(2))
						if (!isNaN(altAmount) && (altSymbol && altRate)) {
							document.getElementById('calculated_tx_fee').innerText = `: ${fees} sats (${altAmount}${altSymbol})`;
						}
					}
					return fees;
				} else {
					document.getElementById('calculated_tx_fee').innerText = `: ${result.error}`;
				}
			} catch (e) {
				console.log(e);
				document.getElementById('calculated_tx_fee').innerText = `: {{ _("Failed to calculate transaction fees.") }}`;
			}
			return -1;
		}

		document.addEventListener("DOMContentLoaded", function(){
		{% if fillform %}
			{% for addr, amount, amount_unit, label in recipients %}
			addRecipient("{{ addr }}", {{ amount }}, "{{ amount_unit }}", "{{ label }}");
			{% endfor %}
		{% else %}
			addRecipient("", 0, "btc", "");
		{% endif %}
			adjustForLiquid()
			document.getElementById('toggle_advanced').addEventListener('click', (event) => {
				toggleAdvanced();
			});
		});

		// from https://www.codingnepalweb.com/drag-drop-list-or-draggable-list-javascript/		
		const sortable_recipient_wrapper = Sortable.create(document.querySelector(".recipient_wrapper"), {
			dataIdAttr: 'id',
			animation: 350,
			handle: '.recipient_dragger',
			
			onEnd: function(evt) {
				console.log("Dragged id: " + evt.item.id);
				console.log("New recipient order: " + JSON.stringify(sortable_recipient_wrapper.toArray()));

			}		
		});


	</script>
{% endblock %}
