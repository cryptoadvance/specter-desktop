{% extends "wallet/components/wallet_tab.jinja" %}
{% set tab = 'wallet_send' %}
{% block content %}

	{% include "includes/qr-scanner.html" %}

	{% from 'wallet/send/components/send_nav.jinja' import send_nav %}
	{{ send_nav('wallet_sendnew', wallet_alias) }}

	<message-box type="error" id="amount_errors_container" style="position: absolute; top: 0; display: none;">
		Error!
		</ul>
	</message-box>

	<form action="{{ url_for('wallet_sendnew',wallet_alias=wallet_alias) }}" method="POST">
		<h1 class="padded">Create Transaction</h1>
		<p class="center">Available Funds: {{wallet.full_available_balance | btcamount}}</p>
		{% if wallet.locked_amount > 0 %}
			<div class="tool-tip" style="text-align: center;">
				<i class="tool-tip__icon">i</i>
				<p class="tool-tip__info">
					<span class="info">
						<span class="info__title">Funds waiting in usigned transactions<br><br></span>
						To make funds available to spend in new transactions, just click on the "Unsigned" tab and delete unsigned transaction you have no need for.
					</span>
				</p>
			</div>
			<p style="display: inline; margin: auto;">&nbsp;You have waiting {{wallet.locked_amount | btcamount}} BTC still in usigned transactions.</p>
			<br><br>
		{% endif %}
		<div class="card">
			<div id="recipients"></div>
			<button style="width: 200px; height: 38px;" type="button" class="btn hidden" onclick="removeRecipient()" id="remove_recipient"><b>&#8722;</b>&nbsp; &nbsp;Remove recipient</button>
			<br>
			<span id="toggle_advanced" style="cursor: pointer;">Advanced &#9654;</span>
			<br><br>
			<div id="advanced_settings" class="hidden">
				{% include "wallet/send/new/components/fee_selection.jinja" %}
				{% set unspents = wallet.cli.listunspent(0) %}
				<div class="row" style="margin-top: 30px;">
					<button style="width: 200px; height: 38px;" type="button" class="btn" onclick="addRecipient()"><svg width="20" height="20" viewBox="0 0 24 24"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg> Add another recipient </button>
				{% if unspents | length > 0 %}
					<button style="width: 200px; height: 38px; margin-left: 10px;" id="coinselect" type="button" class="btn" onclick="toggleExpand()">Select coins manually</button>
				{% endif %}
				</div><br>
				{% include "wallet/send/new/components/coin_selection.jinja" %}
			</div>
			<button type="submit" disabled name="action" value="createpsbt" id="create_psbt_btn" class="btn centered" style="margin-top: 20px;">Create unsigned transaction</button>
		</div>
	</form>
{% endblock %}


{% block scripts %}
	<script>
		// Amounts and units
		var units = [];
		var amounts = [];

		function addRecipient() {
			let i = amounts.length;
			amounts.push(0.0);
			units.push('sat');

			let recipientForm = `
			<div id="recipient_${i}" style="border-bottom: 1px solid var(--cmap-border); padding-bottom: 10px; margin-bottom: 10px;">
				Recipient address:<br>
				<div class="row">
					<input type="text" id="address_${i}" name="address_${i}" oninput="validateForm()"> &nbsp;
					<qr-scanner id="address-scan-${i}">
						<a slot="button" class="btn" style="height: 35px;"><img src="/static/img/qr_tiny.svg"/> Scan</a>
					</qr-scanner>
				</div>
				<br>
				Address label (optional):<br>
				<input type="text" id="label" name="label_${i}">
				<br><br>
				Amount:<br>
				<input style="width: 200px" type="number" name="amount_${i}" oninput="calculateConvertedUnit(${i})" id="amount_${i}" min=0 step="1e-8" autocomplete="off">
				<input type="hidden" name="btc_amount_${i}" id="btc_amount_${i}">
				<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_${i}" value="sat" onchange="toggleUnit(this, ${i})" checked>sat</label>
				<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_${i}" value="btc" onchange="toggleUnit(this, ${i})">BTC</label>
				<div>
					<span class="note" id="converted_unit_amount_${i}">-</span> <span class="note" id="converted_unit_label_${i}">BTC</span>
				</div>
			<div>
			`

			let recipients = document.getElementById('recipients');
			let newRecipient = document.createElement('div');
			newRecipient.innerHTML = recipientForm;
			recipients.appendChild(newRecipient);
			document.getElementById('address-scan-' + i).addEventListener('scan', e=>{
				let addr = e.detail.result;
				if(addr == null){
					return;
				}
				// remove bitcoin: stuff
				if(addr.indexOf("bitcoin:") >= 0){
					addr = addr.substr(addr.indexOf("bitcoin:")+8);
				}
				let arr = addr.split("?");
				addr = arr[0]
				document.getElementById("address_" + i).value = addr;
				let evt = new Event('input');
				document.getElementById("address_" + i).dispatchEvent(evt);
				// parse metadata like amount and message
				if(arr.length > 1){
					arr = arr[1].split("&");
					arr.forEach((e)=>{
						if(e.startsWith("amount=")){
							let val = parseFloat(e.substr(7));
							if(unit == 'sat'){
								val = Math.round(val*1e8);
							}
							document.getElementById("amount_" + i).value = val;
							let evt = new Event('input');
							document.getElementById("amount_" + i).dispatchEvent(evt);
						}
						if(e.startsWith("message=")){
							document.getElementById("label_" + i).value = e.substr(8);
						}
					});
				}
			});
			if (amounts.length == 1) {
				document.getElementById('remove_recipient').style.display = 'none';
			} else {
				document.getElementById('remove_recipient').style.display = 'block';
			}
		} 

		function removeRecipient() {
			let i = amounts.length - 1;
			let recipient = document.getElementById('recipient_' + i);
			recipient.parentNode.removeChild(recipient);
			amounts.splice(i, 1);
			units.splice(i, 1);
			if (amounts.length == 1) {
				document.getElementById('remove_recipient').style.display = 'none';
			} else {
				document.getElementById('remove_recipient').style.display = 'block';
			}
		}

		function toggleUnit(unitSelected, i) {
			units[i] = unitSelected.value;
			document.getElementById('converted_unit_label_' + i).innerHTML = (units[i] == 'sat' ? 'BTC' : 'sat');
			calculateConvertedUnit(i);
		}

		function calculateConvertedUnit(i) {
			let amountInput = document.getElementById('amount_' + i);
			amounts[i] = parseFloat(amountInput.value);
			let convertedAmount = Number.parseFloat(amounts[i] / (units[i] == 'sat' ? 100000000 : 0.000000001)).toFixed((units[i] == 'sat' ? 8 : 0));
			if (convertedAmount == 'NaN') {
				convertedAmount = '-'
			}
			document.getElementById('converted_unit_amount_' + i).innerHTML = convertedAmount;

			document.getElementById('btc_amount_' + i).value = (units[i] == 'btc' ? amounts[i] : amounts[i] / 100000000);

			validateForm();
		}

		function isAboveWalletBalance(unit, amount) {
			return (unit == 'sat' ? amount / 100000000 : amount) > parseFloat('{{ wallet.full_available_balance }}');
		}

		function isInvalidValue(unit, amount){
			if (!amount) {
			    return false;
			}
			return (unit == 'sat' ? amount / 100000000 : amount) < 1e-8;
		}

		// Form validation
		function validateAmount(unit, amount, i) {
			if (i) {
				let amountInput = document.getElementById('amount_' + i);
				amountInput.max = getSpendableAmount(unit);
			}
			
			if (isAboveWalletBalance(unit, amount)) {
				setVisibility('amount_errors_container', 'block');
				document.getElementById('amount_errors_container')
					.innerHTML = "You cannot send more than {{ wallet.full_available_balance | btcamount }} BTC!";
				return false;
			} else if (shouldSelectMoreCoins(unit, amount)) {
				setVisibility('amount_errors_container', 'block');
				document.getElementById('amount_errors_container')
					.innerHTML = "You need to select more coins to match your amount!";
				return false;
			} else if (isInvalidValue(unit, amount)) {
				setVisibility('amount_errors_container', 'block');
				document.getElementById('amount_errors_container')
					.innerHTML = "Invalid amount! Wrong unit?";
				return false;
			} else {
				setVisibility('amount_errors_container', 'none');
				return true;
			}
		}

		function validateAddress(i) {
			let addressInput = document.getElementById('address_' + i);
			if (addressInput.value) {
				return true;
			}
			// TODO: add proper address format validation.
			return false;
		}

		function validateForm() {
			let createPSBTButton = document.getElementById('create_psbt_btn');
			let totalAmount = 0.0;
			for(let i in amounts) {
				let unit = units[i]
				let amount = amounts[i]
				totalAmount += (unit == 'sat' ? amount / 100000000 : amount);
				if (!validateAmount(unit, amount, i)) {
					createPSBTButton.disabled = true;
					return;
				}
			}

			if (!validateAmount('BTC', totalAmount)) {
				createPSBTButton.disabled = true;
				return;
			}
			
			for(let i in amounts) {
				if (!validateAddress(i)) {
					createPSBTButton.disabled = true;
					return;
				}
			}

			createPSBTButton.disabled = false;
		}

		// Utils
		function setVisibility(id, visibility) {
			document.getElementById(id).style.display = visibility;
		}

		function toggleAdvanced() {
			let advancedButton = document.getElementById('toggle_advanced');
			let advancedSettigns = document.getElementById('advanced_settings');
			if (advancedSettigns.style.display === 'block') {
				advancedSettigns.style.display = 'none';
				advancedButton.innerHTML = 'Advanced &#9654;';
				if (isCoinSelectionActive()) {
					toggleExpand();
				}
			} else {
				advancedSettigns.style.display = 'block';
				advancedButton.innerHTML = 'Advanced &#9660;';
			}
		}

		document.addEventListener("DOMContentLoaded", function(){
			addRecipient();
			document.getElementById('toggle_advanced').addEventListener('click', (event) => {
				toggleAdvanced();
			});
		});
	</script>
{% endblock %}
