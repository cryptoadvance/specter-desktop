<!-- 
    A recipient form that returns a Jsonified dictionary of address, label and amount

{#- Usage -

    <recipient-box
    >
    </recipient-box>

#} 
-->


<script type="text/javascript">
	class RecipientBox extends HTMLElement {
		// This tells the browser to treat the element like a form control
		static formAssociated = true;
		// For details on how to ensure that a custom element gets picked up by a parent <form> see:
		// https://web.dev/more-capable-form-controls/#defining-a-form-associated-custom-element
		// see https://css-tricks.com/creating-custom-form-controls-with-elementinternals/ 
		static formAssociated = true;

		static get styles() {
			return css `
			:host {
				display: block;
				width: 100%;
			}
			#textarea-content { 
				height: 150px; 
				font-size: 13px;
			}
			`;
		}


		getHTML(){
			return ` 
				<input type="text"  id="line1"    placeholder='1'>
				<input type="text"  id="line2"    placeholder='1'> 
				<textarea  id="text3"  ></textarea>
				`
		}

		buildHTML(){
			// Create a shadow root
			let shadowRoot = this.attachShadow({
				mode: 'open'
			});

			shadowRoot.innerHTML = this.getHTML();

			this.inputs = {};

			var form_class_names = ['input', 'textarea'];
			for (var j in form_class_names) {
				var input_fields = shadowRoot.querySelectorAll(form_class_names[j]);
				for(var i = 0; i < input_fields.length; i++) {
					var input_field = input_fields[i];
					console.log(j, i, input_field)
					this.inputs[input_field.id] = input_field;
				}
			}
			console.log('Constructed the following objects that will be available as in request.form')
			console.log(this.inputs)
		}

		constructor() {
			super();
			
			this.internals = this.attachInternals();
			this.inputs = {};

			this.buildHTML()

			this.internals.setFormValue(this.value);
		}


		static get observedAttributes() {
			// define the attributes that can be defined via <recipient-box name="recipient-box" id='4'></recipient-box>	
			var attributes = ["value", "name", "id"];
			return attributes;
		}



		connectedCallback() {
			for (var i in this.inputs ) {
				var input_field = this.inputs[i];
				input_field.addEventListener("change", (event) => {
					this.internals.setFormValue(this.value);
					console.log(`${input_field.id}  changed to ${this.value}`);
				})
			}

		}

		disconnectedCallback() {
			for (var i in this.inputs ) {
				this.inputs[i].removeEventListener('change');
			}
		}




		setFormValue() {
			this.internals.setFormValue(this.value);
		}

		attributeChangedCallback(attribute, oldValue, newValue) {
			if (oldValue == newValue){return}
			console.log(`Called  attributeChangedCallback with ${attribute}   =  ${newValue}  ;  Object.keys(this.inputs) = ${Object.keys(this.inputs)}`)
			if (attribute=="value"){
				setValue(newValue);
			} else if (attribute=="name"){
				this.name = newValue;
			} else if (attribute=="id"){
				this.id = newValue;
			} else if (Object.keys(this.inputs).includes(attribute) ) {
				this.inputs[attribute].value = newValue;
			} 

		}

		// This is essential to make the recipient-box compatible with setting a new value
		set value(newValue) {
			this.setValue(newValue);
		}
		setValue(newValue) {
			var dict = JSON.parse(newValue);
			for (var i in this.inputs ) {
				this.inputs[i].value = dict[i]
			} 
			this.setFormValue();
		}
		get value() {
			var dict = {}
			for (var i in this.inputs ) {
				dict[i] = this.inputs[i].value;
			} 

			return JSON.stringify(dict);
		}

		static get properties() {
			return {
				value: {
					type: String
				}
			};
		}


	}
	customElements.define('recipient-box', RecipientBox);
</script>