<!-- 
    A recipient form that returns a Jsonified dictionary of address, label and amount

{#- Usage -

    <recipient-box
    >
    </recipient-box>

#} 
-->


<script type="text/javascript">
	class RecipientBox extends HTMLElement {
		// This tells the browser to treat the element like a form control
		static formAssociated = true;
		// For details on how to ensure that a custom element gets picked up by a parent <form> see:
		// https://web.dev/more-capable-form-controls/#defining-a-form-associated-custom-element
		// see https://css-tricks.com/creating-custom-form-controls-with-elementinternals/ 
		static formAssociated = true;

		static get styles() {
			return css ` `;
		}





		addRecipient(id, addr, amount, amount_unit, label) {
			var recipient = {
				'amount':amount,
				'unit':amount_unit,
				'label':label,
				'id':id,
			};
			

			let valueOrPlaceholder = amount == 0 ? 'placeholder="0"' : `value=${amount}`
			if (amount_unit == 'sat') {
				amount = parseFloat(Number.parseFloat(amount * 1e8).toFixed(0));
				if (amount == 'NaN') {
					amount = '-'
				}
			}
			let step = 1;
			if (amount_unit == 'btc') {
				step = 1e-8;
			}
			let satChecked = amount_unit == 'btc' ? '' : 'checked';
			let btcChecked = amount_unit == 'btc' ? 'checked' : '';
			let convertedUnit = amount_unit == 'btc' ? 'sat' : 'BTC';
			{% if specter.is_liquid and wallet.balance.get("assets", {}) %}
				let assetSelector = `
				<select name="amount_unit_${id}" style="width: 100px;" onchange="toggleUnit(this, ${id})">
					<option value="btc">LBTC</option>
					<option value="sat">L-sat (10⁻⁸ LBTC)</option>
				{% for asset in wallet.balance.get("assets",{}).keys() | sort %}
					<option value="{{asset}}">{{asset | assetlabel}}</option>
				{% endfor %}
				</select>
				`;
			{% else %}
				let assetSelector = `
				<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_${id}" value="sat" onchange="toggleUnit(this, ${id})" ${satChecked}>sat</label>
				<label><input type="radio" class="inline" style="margin: 0 5px;" name="amount_unit_${id}" value="btc" onchange="toggleUnit(this, ${id})" ${btcChecked}>BTC</label>
				`;
			{% endif %}
			let recipientForm = `			
		    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='styles.css') }}">
			<div id="recipient_${id}" class="item" >		
				Recipient ${id+1}
				<span class="recipient_button recipient_remove" title="Remove recipient ${id+1}" id="remove_${id}" style="float:right" onclick="removeRecipient(${id})">&#10060;</span>

				<div class="inner_box"  >
					<div class="row">
						<input type="text" id="address_${id}" name="address_${id}" oninput="validateForm()" value="${addr}" placeholder='{{ _("Recipient address") }}'> &nbsp;
						<qr-scanner id="address-scan-${id}" style="margin-top: 3px;">
							<a slot="button" class="btn" style="height: 35px;">
							<img src="{{ url_for('static', filename='img/qr-code.svg') }}" style="width: 26px; margin: 0px;" class="svg-white"> {{ _("Scan") }}</a>
						</qr-scanner>
					</div>				
					<input type="text" style="margin-top: 3px;" id="label_${id}" name="label_${id}" value="${label}"  placeholder='{{ _("Address label") }}''>
					<br>
					{{ _("Amount:") }}<br>
					<input style="width: 200px" type="number" name="amount_${id}" oninput="calculateConvertedUnit(${id})" id="amount_${id}" min=0 step="${step}" autocomplete="off" ${valueOrPlaceholder}>
					<input type="hidden" name="btc_amount_${id}" id="btc_amount_${id}">
					<div class="mobile-only" style="margin-top: 10px;"></div>
					${assetSelector}
					<span class="note max-btn" style="margin-left: 5px;" id="send_max_${id}" onclick="setMaxAmount(${id})">({{ _("send max") }})</span>
					<div>
						<span class="note" id="converted_unit_amount_${id}">-</span> <span class="note" id="converted_unit_label_${id}">${convertedUnit}</span> <span class="note" id="converted_unit_alt_${id}"></span>
					</div>
				</div>
			<div>
			`
			return recipientForm
		}
		getHTML(){
			var addr = '';
			var amount = 0;
			var amount_unit = 'btc';
			var label = '';
			return this.addRecipient(0, addr, amount, amount_unit, label)
		}

		buildHTML(){
			// Create a shadow root
			let shadowRoot = this.attachShadow({
				mode: 'open'
			});

			shadowRoot.innerHTML = this.getHTML();

			this.inputs = {};

			var form_class_names = ['input', 'textarea'];
			for (var j in form_class_names) {
				var input_fields = shadowRoot.querySelectorAll(form_class_names[j]);
				for(var i = 0; i < input_fields.length; i++) {
					var input_field = input_fields[i];
					console.log(j, i, input_field)
					this.inputs[input_field.id] = input_field;
				}
			}
			console.log('Constructed the following objects that will be available as in request.form')
			console.log(this.inputs)
		}

		constructor() {
			super();
			
			this.internals = this.attachInternals();
			this.inputs = {};

			this.buildHTML()

			this.internals.setFormValue(this.value);
		}


		static get observedAttributes() {
			// define the attributes that can be defined via <recipient-box name="recipient-box" id='4'></recipient-box>	
			var attributes = ["value", "name", "id"];
			return attributes;
		}



		connectedCallback() {
			for (var i in this.inputs ) {
				var input_field = this.inputs[i];
				input_field.addEventListener("change", (event) => {
					this.internals.setFormValue(this.value);
					console.log(`${input_field.id}  changed to ${this.value}`);
				})
			}

		}

		disconnectedCallback() {
			for (var i in this.inputs ) {
				this.inputs[i].removeEventListener('change');
			}
		}




		setFormValue() {
			this.internals.setFormValue(this.value);
		}

		attributeChangedCallback(attribute, oldValue, newValue) {
			if (oldValue == newValue){return}
			console.log(`Called  attributeChangedCallback with ${attribute}   =  ${newValue}  ;  Object.keys(this.inputs) = ${Object.keys(this.inputs)}`)
			if (attribute=="value"){
				setValue(newValue);
			} else if (attribute=="name"){
				this.name = newValue;
			} else if (attribute=="id"){
				this.id = newValue;
			} else if (Object.keys(this.inputs).includes(attribute) ) {
				this.inputs[attribute].value = newValue;
			} 

		}

		// This is essential to make the recipient-box compatible with setting a new value
		set value(newValue) {
			this.setValue(newValue);
		}
		setValue(newValue) {
			var dict = JSON.parse(newValue);
			for (var i in this.inputs ) {
				this.inputs[i].value = dict[i]
			} 
			this.setFormValue();
		}
		get value() {
			var dict = {}
			for (var i in this.inputs ) {
				dict[i] = this.inputs[i].value;
			} 

			return JSON.stringify(dict);
		}

		static get properties() {
			return {
				value: {
					type: String
				}
			};
		}


	}
	customElements.define('recipient-box', RecipientBox);
</script>