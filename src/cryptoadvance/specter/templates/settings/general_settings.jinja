{% extends "base.jinja" %}
{% block main %}
	<form action="?" method="POST">
		<h1>General settings - Specter Desktop {{ current_version }}</h1>
		{% from 'settings/components/settings_menu.jinja' import settings_menu %}
		{{ settings_menu('general_settings', current_user) }}
		<div class="card" style="margin: 20px auto;">
			Block explorer URL ({{ specter.chain }}):<br>
			<input type="text" name="explorer" value="{{ explorer }}">
			<div class="note">
				Specter does not use the block explorer to get any data whatsoever.
				This setting is only to allow opening trnsactions and addresses in a block explorer directly from Specter.<br>
				All data Specter uses still comes directly from the your own connected full node.
			</div>
			<br>
			HWI Bridge URL:<br>
			<input type="text" name="hwi_bridge_url" value="{{ hwi_bridge_url }}">
			<div class="note">
				Specter uses the HWI tool to communicted with hardware devices via USB connection.<br>
				If you connect the USB directly to the machine you are running Specter on, leave the default value here (/hwi/api/).<br>
				If you are user Specter from a remote device, you will need to first run Specter locally in a HWIBridge mode.
				Then update this setting here to the URL you are running Specter on (default: http://127.0.0.1:25441/hwi/api/).
			</div>
			<br>
			<div class="row">
				<button type="submit" class="btn" name="action" value="backup">Download Specter backup files</button>
			</div>
			<div class="note">
				It is recommended to keep your backup files privately as sharing them with result in privacy leaks.
				Backups are recommended to ensure access to funds remains even in case a device from a multisig wallet is lost.
			</div><br>
			<span style="margin: auto 5px auto 0px;">Load Specter backup:</span>
			<div class="row">
				<input type="file" id="file" class="inputfile" webkitdirectory mozdirectory/>
				<input type="hidden" id="restorewallets" name="restorewallets"/>
				<input type="hidden" id="restoredevices" name="restoredevices"/>
				<label for="file" class="btn" style="margin-top: 5px;">
					Choose backup folder
				</label>
			</div>
			<span id="filesloaded"></span>
			<div class="row" style="margin-top: 5px;">
				<button type="submit" class="btn hidden" name="action" value="restore" id="restore" style="margin-bottom: 5px;">Load Specter backup</button>
			</div>
			<div class="note">
				Loading devices/ wallets with names identical to existing ones may overwrite the existing ones.
			</div><br>
			{% if current_user.is_admin %}
			Log Level:<br>
			<select name="loglevel">
				<option value="WARN" {% if loglevel=="WARN" %} selected="selected"{% endif %}>WARN</option>
				<option value="INFO" {% if loglevel=="INFO" %} selected="selected"{% endif %}>INFO</option>
				<option value="DEBUG" {% if loglevel=="DEBUG" %} selected="selected"{% endif %}>DEBUG</option>
			</select>
			<br><br>
			{% endif %}
			<div class="row">
				<button type="submit" class="btn" name="action" value="save">Save</button>
			</div>
		</div>
	</form>
{% endblock %}
{% block scripts %}
	<script type="text/javascript">
		
		document.addEventListener("DOMContentLoaded", function(){
			var el = document.getElementById("file");

			if (el != null) {
				el.addEventListener("change", (e) => {
					let wallets = []
					let devices = []
					files = el.files;
					console.log(files);
					for(let i=0; i<files.length; i++){
						if (files[i].type == 'application/json'){
							let reader = new FileReader();
							reader.onload = function(e) {
								if (files[i].webkitRelativePath.indexOf('devices/') != -1) {
									console.log(files[i].name);
									devices.push(JSON.parse(reader.result));
									document.getElementById('restoredevices').value = JSON.stringify(devices);
									document.getElementById('filesloaded').innerHTML = `<br>Found ${devices.length} devices and ${wallets.length} wallets:`;
									document.getElementById('restore').style.display = 'block';
								} else if (files[i].webkitRelativePath.indexOf('wallets/') != -1) {
									console.log(files[i].name);
									wallets.push(JSON.parse(reader.result));
									document.getElementById('restorewallets').value = JSON.stringify(wallets);
									document.getElementById('filesloaded').innerHTML = `<br>Found ${devices.length} devices and ${wallets.length} wallets:`;
									document.getElementById('restore').style.display = 'block';
								}
							}
							reader.readAsText(files[i]);
						}
					}
				});
			}
		});
	</script>
{% endblock %}