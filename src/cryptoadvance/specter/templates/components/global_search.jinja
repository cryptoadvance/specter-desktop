<script>
    highlighted_elements = []

    function reset_highlight(){
        for (var i in highlighted_elements){ 
            highlighted_elements[i].element.style.backgroundColor = highlighted_elements[i].previous_color;
        }

        highlighted_elements=[]

    }


    function endpoint_visible(allowed_endpoint){
        return ('{{ url_for(request.endpoint, **request.view_args) }}'.indexOf(allowed_endpoint) >= 0)
    }


    function apply_filter_to_input(html_element, search_term){
        if (!html_element.filter_via_input_ids) {return};

        var last_found_element = document;
        var found_element = null;
        for (var i in html_element.filter_via_input_ids){
            if (html_element.filter_via_input_ids[i] == 'shadowRoot'){
                found_element = last_found_element.shadowRoot;
            }
            else {
                found_element = last_found_element.getElementById(html_element.filter_via_input_ids[i]);
            }

            if (!found_element) {break}

            last_found_element = found_element;
        }
        
        console.log(last_found_element);
        last_found_element.value = search_term;
        if (last_found_element.onchange){
            last_found_element.onchange();
        }
        else {
            console.log('No onchange connected for ',last_found_element)
        }
    }

    function process_found_element(html_element, search_term){
        if (!endpoint_visible(html_element.visible_on_endpoints)){return}
        apply_filter_to_input(html_element, search_term);

        if (!html_element.result){return}
        if (html_element.result <= 0){return}


        console.log(`setting green ${html_element.id}`);
        found_element = document.getElementById(html_element.id);
        if (!found_element) {return}
        highlighted_elements.push({element:found_element, previous_color:found_element.style.backgroundColor});
        found_element.style.backgroundColor = 'green';    


    }

    


    function global_search(search_term){
        reset_highlight();


        let url="{{ url_for('wallets_endpoint_api.global_search', search_term='search_term') }}";
        url = url.replace('search_term', JSON.stringify( search_term));
        console.log(url)
        send_request(url, 'GET', "{{ csrf_token() }}").then((answer)=> {
            if (!answer){return}
            console.log(answer)
            
            for (var i in answer.list){
                var html_element = answer.list[i];
                process_found_element(html_element, search_term) ;
            }
            

        });
    }


</script>

<input  name="global_search" placeholder="Type to search" oninput="global_search(this.value)"/>


