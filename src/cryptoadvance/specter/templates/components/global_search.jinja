<script>
    var changed_elements = [];

    function reset_highlight(){
        console.log('before resetting')
        console.log(changed_elements)
        for (var i in changed_elements){ 
            changed_elements[i].element.style = changed_elements[i].old_style;
        } 
    }


    function endpoint_visible(allowed_endpoint){
        return ('{{ url_for(request.endpoint, **request.view_args) }}'.indexOf(allowed_endpoint) >= 0)
    }


    function element_by_ids(ids){
        if (!ids) {return null};

        if (typeof ids === 'string' || ids instanceof String){        
            ids = [ids];
        }


        var last_found_element = document;
        var found_element = null;
        console.log(ids)
        for (var i in ids){
            if (ids[i] == 'shadowRoot'){
                found_element = last_found_element.shadowRoot;
            }
            else {
                found_element = last_found_element.getElementById(ids[i]);
            }

            if (!found_element) {break}

            last_found_element = found_element;
        }

        if (last_found_element === document){return null};

        return last_found_element
    }

    function apply_filter_to_input(html_element, search_term){
        if (!html_element.filter_via_input_ids) {return};
    
        var found_element = element_by_ids(html_element.filter_via_input_ids);
        if (!found_element) {return}
        
        console.log(found_element);
        found_element.value = search_term;
        if (found_element.onchange){
            found_element.onchange();
        }
        else {
            console.log('No onchange connected for ',found_element)
        }
    }

    function apply_new_style(found_element){
        console.log(`setting green ${found_element.id}`);

        // add the found_element to changed_elements  if it is not in there already
        element_already_exists = false;
        for (var i in changed_elements){
            if (changed_elements[i].element == found_element){
                element_already_exists = true;
            }
        }
        if (!element_already_exists){
            changed_elements.push({element:found_element, old_style:found_element.style});
        }
        found_element.style.backgroundColor = 'var(--cmap-blue-darker)';    
    }

    function process_found_element(html_element, search_term){
        if (!endpoint_visible(html_element.visible_on_endpoints)){return};
        apply_filter_to_input(html_element, search_term);

        if (html_element.result == null){return}
        if (html_element.result <= 0){return}

        var found_element = element_by_ids(html_element.id); 
        if (!found_element) {return}
        apply_new_style(found_element)



    }

    


    function global_search(search_term){
        reset_highlight();
        var formData = new FormData();
        formData.append('global_search_input', document.getElementById('global_search_input').value);

        let url="{{ url_for('wallets_endpoint_api.global_search' ) }}";
        send_request(url, 'POST', "{{ csrf_token() }}", formData).then((answer)=> {
            if (!answer){return}
            //console.log(answer)
            
            for (var i in answer.list){
                var html_element = answer.list[i];
                process_found_element(html_element, answer.search_term) ;
            }
            

        });
    }


</script>

<span style="font-size:2em; margin-left:5px; margin-right:5px;"> &#128269;</span>
<input  id="global_search_input" placeholder="Search..." style="width:200px; height:40px; transform:translate(-1%, 10%)" oninput="global_search(this.value)"/>

